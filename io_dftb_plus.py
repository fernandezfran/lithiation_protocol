#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import numpy as np
import pandas as pd


def read_md_out(filename="md.out"):
    """Read the 'md.out' file generated by DFTB+.

    Parameters
    ----------
    filename : str, default="md.out"
        name of the output file of DFTB+

    Returns
    -------
    pd.DataFrame
        a pd.DataFrame with the thermodynamic info
    """
    keys = ("step", "boxes", "vol", "press", "epot", "ekin", "etot", "temp")
    thermo = {key: [] for key in keys}

    with open(filename, "r") as md_info:
        line = md_info.readline()
        while line not in (None, "\r", "\n", ""):
            line = line.strip()

            if line.startswith("MD step"):
                thermo["step"].append(line.split()[2])

            elif line.startswith("Lattice vectors"):
                line = md_info.readline()
                thermo["boxes"].append(line.split()[0])
                line = md_info.readline()
                thermo["boxes"].append(line.split()[1])
                line = md_info.readline()
                thermo["boxes"].append(line.split()[2])

            elif line.startswith("Volume"):
                thermo["vol"].append(line.split()[3])

            elif line.startswith("Pressure"):
                thermo["press"].append(line.split()[3])

            elif line.startswith("Potential Energy"):
                thermo["epot"].append(line.split()[4])

            elif line.startswith("MD Kinetic Energy"):
                thermo["ekin"].append(line.split()[5])

            elif line.startswith("Total MD Energy"):
                thermo["etot"].append(line.split()[5])

            elif line.startswith("MD Temperature"):
                thermo["temp"].append(line.split()[4])

            line = md_info.readline()

    # to numpy arrays and delete None values to transform dict to pd.DataFrame
    thermo = {
        key: np.asarray(value, dtype=np.float32)
        for key, value in thermo.items()
        if value != []
    }

    # split boxes
    thermo["boxes"] = np.hsplit(thermo["boxes"].reshape(len(thermo["step"]), 3), 3)
    for i, kbox in enumerate(("xbox", "ybox", "zbox")):
        thermo[kbox] = thermo["boxes"][i].ravel()
    del thermo["boxes"]

    return pd.DataFrame(thermo)


def write_gen_format(frame, filename):
    """Write a .gen format file with a xyz frame.

    Parameters
    ----------
    frame : exma.core.AtomicSystem
        frame of the structure to write as genFormat

    filename : str
        name of the .gen file
    """
    with open(filename, "w") as gen:
        gen.write(f" {frame.natoms} S")
        gen.write(" Si Li")
        for i, (t, x, y, z) in enumerate(zip(frame.types, frame.x, frame.y, frame.z)):
            atom_type = 1 if t == "Si" else 2
            gen.write(f"{i + 1} {atom_type} {x:.6e} {y:.6e} {z:.6e}")
        gen.write("0.0 0.0 0.0")
        gen.write(f"{frame.box[0]} 0.0 0.0")
        gen.write(f"0.0 {frame.box[1]} 0.0")
        gen.write(f"0.0 0.0 {frame.box[2]}")
